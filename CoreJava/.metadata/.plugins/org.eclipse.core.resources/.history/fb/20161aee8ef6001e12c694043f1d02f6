package SortAlgorithm;

import java.util.*;

public class CyclicSortProblms {
	public static void main(String[] args) {
		int[] arr = { 4, 3, 2, 7, 8, 2, 3, 1 };
		System.out.println(findDuplicates(arr));
		int [] arrMiss = {4,3,2,7,8,2,3,1};
		System.out.println(findDisappearedNumbers(arrMiss));
	}

	// find multiple duplicates in a 1-n numbers
	public static List<Integer> findDuplicates(int[] nums) {
		List<Integer> list = new ArrayList<>();
		int i = 0;
		int len = nums.length;
		while (i < len) {
			int index = nums[i] - 1;
			if (index < len && nums[i] != nums[index]) {
				int temp = nums[i];
				nums[i] = nums[index];
				nums[index] = temp;

			} else {
				i++;
			}
		}
		for (int j = 0; j < nums.length; j++) {
			if (j + 1 != nums[j]) {
				list.add(nums[j]);
			}
		}
		return list;
	}
	
	//if the element is missing in the 1-n numbers
	 public static List<Integer> findDisappearedNumbers(int[] nums) {
	        List<Integer> list = new ArrayList<>();
	        int i = 0;
	        int len = nums.length;
	        while(i<len){
	            int val = nums[i]-1;
	            if(val<len&&nums[i]!=nums[val]){
	                int temp = nums[val];
	                nums[val] = nums[i];
	                nums[i] = temp;
	            }else{
	                i++;
	            }
	        }
	       // System.out.print(Arrays.toString(nums));
	        for(int j = 0;j<len;j++){
	            if(j!=nums[j]-1){
	                list.add(j+1);
	            }
	        }
	        return list;
	        
	    }

}

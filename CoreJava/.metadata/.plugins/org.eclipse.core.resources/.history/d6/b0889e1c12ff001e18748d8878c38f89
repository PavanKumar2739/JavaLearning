import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'climbingLeaderboard' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY ranked
     *  2. INTEGER_ARRAY player
     */

    public static List<Integer> climbingLeaderboard(List<Integer> ranked, List<Integer> player) {
    // Write your code here
    List<Integer> filterDup = new ArrayList<>();
    List<Integer> ranks = new ArrayList<>();
    for(int i =0;i<ranked.size()-1;i++){
        if(ranked.get(i)==ranked.get(i+1)){
            ranked.remove(i+1);
        }
    }
    for(int i =0;i<player.size();i++){
        ranked.add(player.get(i));
        System.out.println(ranked);
        System.out.println(index(ranked));
    }
    System.out.println(ranked);
    return ranks;

    }
    public static int index(List<Integer> ranked){
        int rank = 1;
        for(int i =0;i<ranked.size();i++){
            for(int j = i+1;j>0;j--){
                if(ranked.get(j)>ranked.get(j-1)){
                    int temp = ranked.get(j);
                    ranked.set(j,ranked.get(j-1));
                    ranked.set(j-1,temp);
                    
                }
                else{
                    rank = j;
                    break;
                }
            }
        }
        return rank;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int rankedCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> ranked = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int playerCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> player = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.climbingLeaderboard(ranked, player);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}

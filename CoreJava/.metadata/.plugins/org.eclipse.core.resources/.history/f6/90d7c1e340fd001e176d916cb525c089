package ExamProblems;

import java.util.*;

public class Parity {
	public static void main(String[] args) {
		int []arrayNums = {4, 7, 2, 1, 9, 6, 11, 3, 8, 7};
		Arrays.sort(arrayNums);
		List<Integer> eve = new ArrayList<>();
		List<Integer> odd = new ArrayList<>();
		sepEveOdd(arrayNums, eve, odd);
		//boolean falg = false;
		while(eve.size()>0||odd.size()>0) {
			if(eve.size()>0) {
				eve.remove(eve.size()-1);
			}else {
				break;
			}
			if(odd.size()>0) {
				odd.remove(odd.size()-1);
			}else {
				break;
			}
			
		}
		System.out.println(eve);
		System.out.println(odd);
		int sum = 0;
		if(odd.size()>1) {
			sum = odd.stream().reduce(0,(i,j) -> i+j );
		}
		if(eve.size()>1) {
			sum = eve.stream().reduce(0,(i,j) -> i+j );
		}
		System.out.println(sum);
		
	}
	
	static void sepEveOdd(int []arr,List<Integer> eve,List<Integer> odd ) {
		for(int num:arr) {
			if(num%2==0) {
				eve.add(num);
			}else {
				odd.add(num);
			}
		}
		
	}
	static boolean hasEvenParity(int x) 
	{ 
	    int y = x ^ (x >> 1); 
	    y = y ^ (y >> 2); 
	    y = y ^ (y >> 4); 
	    y = y ^ (y >> 8); 
	    y = y ^ (y >> 16); 

	    // Rightmost bit of y holds the parity value 
	    // if (y&1) is 1 then parity is odd else even 
	    return (y & 1) == 0;
	} 

}
